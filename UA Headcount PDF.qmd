---
title: "University of Alaska 2023 Fall Headcount"
author: "Office of Human Resources"
format: 
  pdf:
    toc: TRUE
    toc-depth: 3
    geometry: 
      - left=20mm
      - top=30mm
      - heightrounded
    classoption: landscape
---

```{r}
#| label: setup
#| include: false

library(readxl)
library(tidyverse)
library(dplyr)
library(kableExtra)
library(lubridate)

# Import, Clean, Setup #########################################################

## Define Orders ===============================================================
mau_title_order <- c("UAA", "UAF", "UAS", "System Office", "Education Trust of Alaska", "UA Foundation")
so_maus <- c("System Office", "Enterprise Entities", "UA Foundation")
ir_group_order <- c("Academic Administrators", 
                    "Officers and Senior Administrators", 
                    "Regular Staff", 
                    "Temporary Staff", 
                    "Regular Faculty",
                    "Adjunct/Temporary Faculty",
                    "Graduate Assistants",
                    "Student")

## Define Bargaining Units =====================================================
bargaining_unit_list <- c('UAFT Faculty', 'Local 6070', 'UNAC Faculty', 'UNAD Adjunct Faculty')

## Define Demographic Fields ===================================================
demographic_fields <- c("Female", "Person of Color", "Median Age")
demographic_threshold <- 10

## Import FTVORGN_CURRENT ======================================================
orgn_titles <- read_excel("data/ftvorgn_current.xlsx") |> 
  janitor::clean_names()

## Import IR Freeze Data =======================================================
### Add Employee Type, FY, mau_title -------------------------------------------
### Filter to only include fall/spring and CY > 2013
headcount_data <- read_excel("data/headcount_data.xlsx") |> 
  janitor::clean_names() |> 
  filter(substr(term_code, 5, 6) %in% c('01', '03'),
         substr(term_code, 1, 4) >= 2013) |> 
  mutate(emp_type = case_when(job_class_primary_code %in% c("NR", "XR", "EX", "CR") ~ "Regular Staff",
                              job_class_primary_code %in% c("F9", "FR", "FN", "A9", "AR") ~ "Regular Faculty",
                              job_class_primary_code %in% c("NT", "NX", "XT", "XX", "CT") ~ "Temporary Staff",
                              job_class_primary_code %in% c("FT", "FW") ~ "Temporary Faculty",
                              job_class_primary_code %in% c("GN", "GT") ~ "Graduate Student",
                              job_class_primary_code %in% c("SN", "ST") ~ "Student"),
         ir_group = case_when(job_class_primary_code %in% c("FR", "AR") ~ "Academic Administrators",
                              job_class_primary_code %in% c("EX") ~ "Officers and Senior Administrators",
                              job_class_primary_code %in% c("NR", "XR", "CR") ~ "Regular Staff",
                              job_class_primary_code %in% c("NT", "NX", "XT", "XX", "CT") ~ "Temporary Staff",
                              job_class_primary_code %in% c("GN", "GT") ~ "Graduate Assistants",
                              job_class_primary_code %in% c("F9", "FN", "A9") ~ "Regular Faculty",
                              job_class_primary_code %in% c("FT", "FW") ~ "Adjunct/Temporary Faculty",
                              job_class_primary_code %in% c("SN", "ST") ~ "Student"),
         fy = str_c('FY', str_sub(char(fiscal_year), 3, 4)),
         mau_title = case_match(mau_code,
                                "SPS" ~ "System Office",
                                "XEE" ~ "Education Trust of Alaska",
                                "XFD" ~ "UA Foundation",
                                .default = mau_code),
         bargaining_unit_member = case_when(bargaining_unit %in% bargaining_unit_list ~ TRUE,
                                            .default = FALSE),
         gender = case_when(gender == 'M' ~ 'Male',
                            gender == 'F' ~ 'Female',
                            .default = 'Not Reported/ Other'),
         person_of_color = case_when(substr(race_desc, 1, 1) == '7' ~ FALSE,
                                     .default = TRUE))

## Merge orgn_titles into headcount_data ========================================
headcount_data <- headcount_data |> 
  left_join(orgn_titles, join_by(department_code == orgn_code)) 

# ASSOCIATE TERMS W SEQUENCE NUMBERS ############################################
## Create Sequence Numbers ======================================================
term_sequence_numbers <- headcount_data |> 
  select(term_code) |> 
  distinct() |> 
  arrange(desc(term_code)) |> 
  mutate(seq_no = row_number())

## Join Sequence Numbers into headcount_data ====================================
headcount_data <- headcount_data |> 
  inner_join(term_sequence_numbers, join_by(term_code))

# NOTES #########################################################################
extract_date <- headcount_data |> filter(seq_no == 1) |> distinct(extract_date) |> pull()
```

```{r}
#| label: functions
#| include: false

# CURRENT HEADCOUNT BY EMPLOYEE TYPE ###############################################################
f_hct_by_employee_type <- function(mau = mau_title_order) {
grouped <- headcount_data |> 
  filter(seq_no == 1,
         mau_title %in% mau) |> 
  group_by(ir_group) |> 
  summarise(employees = n(),
            ft = sum(ft_pt_status == 'FT'),
            regular = sum(regular_temporary_status == 'REGULAR'),
            represented = sum(bargaining_unit_member),
            female = sum(gender == 'Female'),
            person_of_color = sum(person_of_color),
            median_age = median(census_age)) |>
  mutate(ft_pct = str_c(round((ft / employees) * 100), '%'),
         regular_pct = str_c(round((regular / employees) * 100), '%'),
         represented_pct = str_c(round((represented / employees) * 100), '%'),
         female_pct = str_c(round((female / employees) * 100), '%'),
         color_pct = str_c(round((person_of_color / employees) * 100), '%'),
         median_age = trunc(median_age)) |> 
  arrange(factor(ir_group, levels = ir_group_order)) # Reorder by Factor

totals <- headcount_data |> 
  filter(seq_no == 1,
         mau_title %in% mau) |> 
  summarise(employees = n(),
            ft = sum(ft_pt_status == 'FT'),
            regular = sum(regular_temporary_status == 'REGULAR'),
            represented = sum(bargaining_unit_member),
            female = sum(gender == 'Female'),
            person_of_color = sum(person_of_color),
            median_age = median(census_age)) |>
  mutate(ft_pct = str_c(round((ft / employees) * 100), '%'),
         regular_pct = str_c(round((regular / employees) * 100), '%'),
         represented_pct = str_c(round((represented / employees) * 100), '%'),
         female_pct = str_c(round((female / employees) * 100), '%'),
         color_pct = str_c(round((person_of_color / employees) * 100), '%'),
         median_age = trunc(median_age),
         ir_group = 'Total')

full <-
  rbind(grouped,
        totals) |> 
  mutate(female_pct = if_else(employees < 10, '-', female_pct),
         color_pct = if_else(employees < demographic_threshold, '-', color_pct),
         median_age = if_else(employees < demographic_threshold, '-', as.character(median_age))) |>
  select("Employee Type" = ir_group,
         Headcount = employees,
         "Full Time" = ft_pct,
         Regular = regular_pct,
         Represented = represented_pct,
         Female = female_pct,
         "Person of Color" = color_pct,
         "Median Age" = median_age) 

full |> 
  kbl(booktabs = T,
      align =  c('l','r','r','r','r','r','r','r')) |>
  column_spec(1, width = '2.3in') |> 
  row_spec(0, bold = T) |> 
  row_spec(as.numeric(max(rownames(full))) -1, hline_after = T) |> 
  row_spec(as.numeric(max(rownames(full))), bold = T) 
}
```

# Current Headcount

## By University

```{r}
#| label: Current UA Headcount by University
#| echo: false


current_ua_headcount_by_university <- headcount_data |> 
  filter(seq_no == 1) |> 
  group_by(mau_title) |> 
  summarise(employees = n(),
            ft = sum(ft_pt_status == 'FT'),
            regular = sum(regular_temporary_status == 'REGULAR'),
            represented = sum(bargaining_unit_member),
            female = sum(gender == 'Female'),
            person_of_color = sum(person_of_color),
            median_age = median(census_age)) |>
  mutate(ft_pct = str_c(round((ft / employees) * 100), '%'),
         regular_pct = str_c(round((regular / employees) * 100), '%'),
         represented_pct = str_c(round((represented / employees) * 100), '%'),
         female_pct = str_c(round((female / employees) * 100), '%'),
         color_pct = str_c(round((person_of_color / employees) * 100), '%'),
         median_age = trunc(median_age)) |>
  arrange(factor(mau_title, levels = mau_title_order)) # Reorder by Factor


current_ua_headcount_totals_row <- headcount_data |> 
  filter(seq_no == 1) |> 
  summarise(employees = n(),
            ft = sum(ft_pt_status == 'FT'),
            regular = sum(regular_temporary_status == 'REGULAR'),
            represented = sum(bargaining_unit_member),
            female = sum(gender == 'Female'),
            person_of_color = sum(person_of_color),
            color_pct = str_c(round((person_of_color / employees) * 100), '%'),
            median_age = median(census_age)) |>
  mutate(ft_pct = str_c(round((ft / employees) * 100), '%'),
         regular_pct = str_c(round((regular / employees) * 100), '%'),
         represented_pct = str_c(round((represented / employees) * 100), '%'),
         female_pct = str_c(round((female / employees) * 100), '%'),
         color_pct = str_c(round((person_of_color / employees) * 100), '%'),
         median_age = trunc(median_age),
         mau_title = 'Total')

current_ua_headcount_by_university_full <-
  rbind(current_ua_headcount_by_university,
        current_ua_headcount_totals_row) |> 
  mutate(female_pct = if_else(employees < 10, '-', female_pct),
         color_pct = if_else(employees < demographic_threshold, '-', color_pct),
         median_age = if_else(employees < demographic_threshold, '-', as.character(median_age))) |>
  select(University = mau_title,
         Headcount = employees,
         "Full Time" = ft_pct,
         Regular = regular_pct,
         Represented = represented_pct,
         Female = female_pct,
         "Person of Color" = color_pct,
         "Median Age" = median_age) 


current_ua_headcount_by_university_full |> 
  kbl(booktabs = T,
      align =  c('l','r','r','r','r','r','r','r')) |>
  column_spec(1, width = '2.3in') |> 
  row_spec(0, bold = T) |> 
  row_spec(as.numeric(max(rownames(current_ua_headcount_by_university_full))) -1, hline_after = T) |> 
  row_spec(as.numeric(max(rownames(current_ua_headcount_by_university_full))), bold = T) 

```

\newpage

## By Employee Type

### UA

```{r}
#| label: Current UA Headcount by Employee Type
#| echo: false

f_hct_by_employee_type()
```

### UAA

```{r}
#| label: Current UAA Headcount by Employee Type
#| echo: false

f_hct_by_employee_type('UAA')
```

### UAF

```{r}
#| label: Current UAF Headcount by Employee Type
#| echo: false

f_hct_by_employee_type('UAF')


```

### UAS

```{r}
#| label: Current UAS Headcount by Employee Type
#| echo: false

f_hct_by_employee_type('UAS')
```

### System Office, Enterprise Entities, and Education Trust of Alaska

```{r}
#| label: Current SO Headcount by Employee Type
#| echo: false

f_hct_by_employee_type(so_maus)

```

# Notes

Data Origin: RPTP - Institutional Research Freeze Data

Data Extract Date: `r extract_date`

Groups of fewer than `r demographic_threshold` employees will not display demographic information.

## Definitions

#### Enterprise Entities

This group is the Education Trust of Alaska

```{r}
#| label: current ua headcount by IR Group
#| echo: false
#| fig-width: 8
#| fig-asp: 0.618

#max_ir_group_xlim <- headcount_data |> 
#  filter(seq_no == 1) |> 
#  count(ir_group) |> 
#  slice_max(n) |> 
#  select(n) |> 
#  mutate(n = round(n * 1.10))

# max_ir_group_xlim <- max_ir_group_xlim$n

#headcount_data |> 
#  filter(seq_no == 1) |> 
#  count(ir_group) |> 
#  mutate(ir_group = factor(ir_group,
#                    levels = rev(ir_group_order))) |> # Use this to reorder factors for bar charts (rev for reverse order)
#  ggplot(aes(y = ir_group, x = n)) +
#  geom_bar(stat = 'identity') +
#  geom_text(aes(label = n), hjust = -.1) +
#  xlim(NA, max_ir_group_xlim) +
#  labs(title = "Employees by IR Group",
#       x = "Employees",
#       y = NULL)

```

```{r}
#| label: scratch
#| include: false


```
